<Window
    x:Class="X4_ComplexCalculator.MainWindow"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:i="http://schemas.microsoft.com/xaml/behaviors"
    xmlns:lex="http://wpflocalizeextension.codeplex.com"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    xmlns:plnArea="clr-namespace:X4_ComplexCalculator.Main.WorkArea"
    xmlns:x4cmn="clr-namespace:X4_ComplexCalculator.Common"
    xmlns:x4vcvt="clr-namespace:X4_ComplexCalculator.Common.ValueConverter"
    xmlns:xcad="http://schemas.xceed.com/wpf/xaml/avalondock"
    xmlns:xctk="http://schemas.xceed.com/wpf/xaml/toolkit"
    Title="{lex:Loc Lang:MainWindowTitle}"
    Width="1000"
    Height="600"
    lex:LocalizeDictionary.DefaultProvider="{StaticResource CSVLocalizationProvider}"
    lex:LocalizeDictionary.DesignCulture="en"
    lex:ResxLocalizationProvider.DefaultAssembly="WPFLocalizationExtension"
    lex:ResxLocalizationProvider.DefaultDictionary="StringResources"
    Style="{StaticResource DefaultWindowBackgroundStyle}"
    mc:Ignorable="d">

    <Window.Resources>
        <x4vcvt:ActiveDocumentConverter x:Key="ActiveDocumentConverter" />
    </Window.Resources>

    <Window.InputBindings>
        <KeyBinding Command="{Binding CreateNewCommand}" Gesture="Ctrl+N" />
        <KeyBinding Command="{Binding SaveCommand}" Gesture="Ctrl+S" />
        <KeyBinding Command="{Binding SaveAsCommand}" Gesture="Shift+Ctrl+S" />
        <KeyBinding Command="{Binding OpenCommand}" Gesture="Ctrl+O" />
    </Window.InputBindings>

    <i:Interaction.Triggers>
        <i:EventTrigger EventName="Loaded">
            <i:InvokeCommandAction Command="{Binding WindowLoadedCommand, Mode=OneTime}" />
        </i:EventTrigger>

        <i:EventTrigger EventName="Closing">
            <i:InvokeCommandAction Command="{Binding WindowClosingCommand, Mode=OneTime}" PassEventArgsToCommand="True" />
        </i:EventTrigger>
    </i:Interaction.Triggers>

    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto" />
            <RowDefinition Height="*" />
        </Grid.RowDefinitions>


        <!--  ウィンドウ上部メニュー  -->
        <Menu Grid.Row="0">

            <!--  ファイル(F)  -->
            <MenuItem Header="{lex:Loc Lang:FileMenu}">

                <!--  新規  -->
                <MenuItem
                    Command="{Binding CreateNewCommand, Mode=OneTime}"
                    Header="{lex:Loc Lang:New}"
                    InputGestureText="Ctrl+N" />

                <!--  上書き保存  -->
                <MenuItem
                    Command="{Binding SaveCommand, Mode=OneTime}"
                    Header="{lex:Loc Lang:OverwriteSave}"
                    InputGestureText="Ctrl+S" />

                <!--  名前を付けて保存  -->
                <MenuItem
                    Command="{Binding SaveAsCommand, Mode=OneTime}"
                    Header="{lex:Loc Lang:SaveAs}"
                    InputGestureText="Shift+Ctrl+S" />

                <!--  開く  -->
                <MenuItem
                    Command="{Binding OpenCommand, Mode=OneTime}"
                    Header="{lex:Loc Lang:Open}"
                    InputGestureText="Ctrl+O" />

                <Separator />

                <!--  インポート  -->
                <MenuItem
                    Header="{lex:Loc Lang:Import}"
                    InputGestureText="Ctrl+I"
                    ItemsSource="{Binding Imports}">
                    <MenuItem.ItemContainerStyle>
                        <Style TargetType="{x:Type MenuItem}">
                            <Setter Property="MenuItem.Header" Value="{Binding Title, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}" />
                            <Setter Property="Command" Value="{Binding Command, Mode=OneTime}" />
                            <Setter Property="CommandParameter" Value="{Binding ., Mode=OneTime}" />
                        </Style>
                    </MenuItem.ItemContainerStyle>
                </MenuItem>

                <!--  エクスポート  -->
                <MenuItem
                    Header="{lex:Loc Lang:Export}"
                    InputGestureText="Ctrl+E"
                    ItemsSource="{Binding Exports}">
                    <MenuItem.ItemContainerStyle>
                        <Style TargetType="{x:Type MenuItem}">
                            <Setter Property="MenuItem.Header" Value="{Binding Title, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}" />
                            <Setter Property="Command" Value="{Binding Command, Mode=OneTime}" />
                            <Setter Property="CommandParameter" Value="{Binding ., Mode=OneTime}" />
                        </Style>
                    </MenuItem.ItemContainerStyle>
                </MenuItem>

                <Separator />

                <!--  DB更新  -->
                <MenuItem
                    Command="{Binding UpdateDBCommand, Mode=OneTime}"
                    Header="{lex:Loc Lang:UpdateDB}"
                    InputGestureText="Ctrl+U" />

            </MenuItem>


            <MenuItem Header="{lex:Loc Lang:Layout}">
                <!--  レイアウト保存  -->
                <MenuItem Command="{Binding SaveLayout, Mode=OneTime}" Header="{lex:Loc Lang:SaveLayout}" />

                <!--  レイアウト一覧  -->
                <MenuItem
                    Header="{lex:Loc Lang:LayoutList}"
                    ItemsSource="{Binding Layouts}"
                    ToolBar.OverflowMode="Always">
                    <MenuItem.ItemContainerStyle>
                        <Style TargetType="{x:Type MenuItem}">
                            <Setter Property="MenuItem.Header" Value="{Binding LayoutName}" />
                            <Setter Property="MenuItem.IsChecked" Value="{Binding IsChecked, Mode=TwoWay}" />
                            <Setter Property="MenuItem.IsCheckable" Value="True" />
                            <Setter Property="Template" Value="{StaticResource DeleteButtonMenuItemTemplate}" />
                        </Style>
                    </MenuItem.ItemContainerStyle>
                </MenuItem>
            </MenuItem>

            <MenuItem
                Header="{lex:Loc Lang:Language}"
                ItemsSource="{Binding Languages}"
                ToolBar.OverflowMode="Always">
                <MenuItem.ItemContainerStyle>
                    <Style TargetType="{x:Type MenuItem}">
                        <Setter Property="MenuItem.Header" Value="{Binding Name}" />
                        <Setter Property="MenuItem.IsChecked" Value="{Binding IsChecked, Mode=TwoWay}" />
                        <Setter Property="MenuItem.IsCheckable" Value="True" />
                    </Style>
                </MenuItem.ItemContainerStyle>
            </MenuItem>
        </Menu>

        <!--  計画エリア  -->
        <xcad:DockingManager
            Grid.Row="1"
            ActiveContent="{Binding ActiveContent, Mode=TwoWay, Converter={StaticResource ActiveDocumentConverter}, UpdateSourceTrigger=PropertyChanged}"
            DocumentsSource="{Binding Documents}">


            <!--  計画エリアが閉じられるとき  -->
            <i:Interaction.Triggers>
                <i:EventTrigger EventName="DocumentClosing">
                    <i:InvokeCommandAction Command="{Binding DocumentClosingCommand, Mode=OneTime}" PassEventArgsToCommand="True" />
                </i:EventTrigger>
            </i:Interaction.Triggers>

            <!--  計画エリアの内容設定  -->
            <xcad:DockingManager.Resources>
                <DataTemplate DataType="{x:Type plnArea:WorkAreaViewModel}">
                    <plnArea:WorkArea DataContext="{Binding}" />
                </DataTemplate>
            </xcad:DockingManager.Resources>

            <!--  計画エリアのタイトル部の設定  -->
            <xcad:DockingManager.DocumentHeaderTemplate>
                <DataTemplate>
                    <TextBlock MinWidth="70" Text="{Binding Content.Title, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}" />
                </DataTemplate>
            </xcad:DockingManager.DocumentHeaderTemplate>

            <!--  計画エリア一覧に表示する内容の設定  -->
            <xcad:DockingManager.DocumentPaneMenuItemHeaderTemplate>
                <DataTemplate>
                    <TextBlock Text="{Binding Content.Title, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}" />
                </DataTemplate>
            </xcad:DockingManager.DocumentPaneMenuItemHeaderTemplate>

            <xcad:LayoutRoot />

        </xcad:DockingManager>

        <!--  IsBusy="{Binding FileLoadingIsBusy, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}">  -->
        <xctk:BusyIndicator
            Grid.Row="0"
            Grid.RowSpan="2"
            IsBusy="{Binding FileLoadingIsBusy, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}">
            <xctk:BusyIndicator.BusyContentTemplate>
                <DataTemplate>
                    <StackPanel Margin="4">
                        <TextBlock
                            HorizontalAlignment="Center"
                            FontWeight="Bold"
                            Text="{lex:Loc Lang:LoadingFile}" />
                        <StackPanel Margin="0,4,4,4">
                            <TextBlock HorizontalAlignment="Center" Text="{Binding DataContext.LoadingFileName, Mode=OneWay, UpdateSourceTrigger=PropertyChanged, RelativeSource={RelativeSource FindAncestor, AncestorType=Window}}" />
                            <ProgressBar
                                Width="200"
                                Height="15"
                                Value="{Binding DataContext.FileLoadingProgress, Mode=OneWay, UpdateSourceTrigger=PropertyChanged, RelativeSource={RelativeSource FindAncestor, AncestorType=Window}}" />
                        </StackPanel>
                    </StackPanel>
                </DataTemplate>
            </xctk:BusyIndicator.BusyContentTemplate>


            <!--  元々用意されているプログレスバーを非表示  -->
            <xctk:BusyIndicator.ProgressBarStyle>
                <Style TargetType="ProgressBar">
                    <Setter Property="Visibility" Value="Collapsed" />
                </Style>
            </xctk:BusyIndicator.ProgressBarStyle>
        </xctk:BusyIndicator>
    </Grid>
</Window>
