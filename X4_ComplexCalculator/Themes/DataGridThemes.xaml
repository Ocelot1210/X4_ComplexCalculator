<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:local="clr-namespace:X4_ComplexCalculator.Themes">


    <!-- DataGridColumnHeaderの初期設定 -->
    <Style TargetType="DataGridColumnHeader" x:Key="DefaultDataGridColumnHeaderStyle">
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
    </Style>

    <!-- コンテキストメニューを表示しても選択行が灰色にならないようにするスタイル -->
    <Style TargetType="DataGridCell" x:Key="DataGridCellDefaultStyle">
        <Style.Triggers>
            <!-- 選択中のセルの色 -->
            <Trigger Property="IsSelected" Value="True">
                <Setter Property="Background"  Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
                <Setter Property="Foreground"  Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}"/>
                <Setter Property="BorderBrush" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
            </Trigger>

            <!-- 選択行 -->
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding IsSelected, RelativeSource={RelativeSource Self}}" Value="True"/>
                    <Condition Binding="{Binding IsKeyboardFocusWithin, RelativeSource={RelativeSource AncestorType=DataGrid}}" Value="False"/>
                </MultiDataTrigger.Conditions>
                <Setter Property="Background"  Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}"/>
                <Setter Property="Foreground"  Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
                <Setter Property="BorderBrush" Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}"/>
            </MultiDataTrigger>
            

            <!-- コンテキストメニューを表示している場合の背景色 -->
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding IsSelected, RelativeSource={RelativeSource Self}}" Value="True"/>
                    <Condition Binding="{Binding ContextMenu.IsOpen, RelativeSource={RelativeSource AncestorType=DataGrid}}" Value="True"/>
                </MultiDataTrigger.Conditions>
                <Setter Property="Background"  Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
                <Setter Property="Foreground"  Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}"/>
                <Setter Property="BorderBrush" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
            </MultiDataTrigger>
            <!--
            <Trigger Property="IsSelected" Value="True">
                <Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
                <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}"/>
                <Setter Property="BorderBrush" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
            </Trigger>

            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding IsSelected, RelativeSource={RelativeSource Self}}" Value="True"/>
                    <Condition Binding="{Binding IsKeyboardFocusWithin, RelativeSource={RelativeSource AncestorType=DataGrid}}" Value="False"/>
                </MultiDataTrigger.Conditions>
                <Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}"/>
                <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
                <Setter Property="BorderBrush" Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}"/>
            </MultiDataTrigger>

            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding IsSelected, RelativeSource={RelativeSource Self}}" Value="True"/>
                    <Condition Binding="{Binding ContextMenu.IsOpen, RelativeSource={RelativeSource AncestorType=DataGrid}}" Value="True"/>
                </MultiDataTrigger.Conditions>
                <Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
                <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}"/>
                <Setter Property="BorderBrush" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
            </MultiDataTrigger>
            -->
        </Style.Triggers>
    </Style>

    
    <!-- DataGridの初期設定 -->
    <Style TargetType="DataGrid" x:Key="DefaultDataGridStyle">
        <Setter Property="AutoGenerateColumns" Value="False"/>
        <Setter Property="CanUserAddRows" Value="False"/>
        <Setter Property="CanUserDeleteRows" Value="False"/>
        <Setter Property="CanUserReorderColumns" Value="False"/>
        <Setter Property="CanUserResizeRows" Value="False"/>
        <Setter Property="CanUserSortColumns" Value="True"/>
        <Setter Property="EnableColumnVirtualization" Value="True"/>
        <Setter Property="VirtualizingPanel.IsVirtualizing" Value="True"/>
        <Setter Property="VirtualizingPanel.VirtualizationMode" Value="Recycling"/>
        <Setter Property="ColumnHeaderStyle" Value="{StaticResource DefaultDataGridColumnHeaderStyle}"/>
        <Setter Property="CellStyle" Value="{StaticResource DataGridCellDefaultStyle}"/>
        <Setter Property="SelectionUnit" Value="FullRow"/>
    </Style>


    <!-- 右寄せセル用 -->
    <Style TargetType="DataGridCell" x:Key="RightAlignedDataGridCell" BasedOn="{StaticResource DataGridCellDefaultStyle}">
        <Setter Property="TextBlock.TextAlignment" Value="Right"/>
    </Style>

    <!-- 読み取り専用セル -->
    <Style TargetType="DataGridCell" x:Key="DataGridReadOnlyCell" BasedOn="{StaticResource DataGridCellDefaultStyle}">
        <Setter Property="FontStyle" Value="Italic"/>
    </Style>
    
    <!-- 右寄せセル用(読み取り専用) -->
    <Style TargetType="DataGridCell" x:Key="RightAlignedDataGridReadOnlyCell" BasedOn="{StaticResource RightAlignedDataGridCell}">
        <Setter Property="FontStyle" Value="Italic"/>
    </Style>

</ResourceDictionary>